# File: infra/docker-compose.test.yml
version: "3.9"

networks:
  auth_network:
    driver: bridge

services:
  auth-service:
    build:
      context: ..
      dockerfile: infra/Dockerfile.test
    container_name: auth-service-test
    env_file: ../.env
    environment:
      ENV: "test"
      DEBUG: "True"
      PORT: 8001
      BASE_URL: "http://localhost"
      DB_URI: ${TEST_DB_URI}
      REDIS_URL: ${TEST_REDIS_URL}
      JWT_SECRET_KEY: ${TEST_JWT_SECRET_KEY}
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 5s

  db:
    image: postgres:17-alpine
    container_name: auth-db-test
    environment:
      POSTGRES_DB: ${TEST_DB_NAME}
      POSTGRES_USER: ${TEST_DB_USER}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD}
    volumes:
      - db_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7-alpine
    container_name: auth-redis-test
    command: redis-server --requirepass "${TEST_REDIS_PASSWORD}"
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
    restart: unless-stopped
    networks:
      - auth_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${TEST_REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  db_test_data:
    driver: local
  redis_test_data:
    driver: local
